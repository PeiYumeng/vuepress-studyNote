(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{461:function(t,s,a){"use strict";a.r(s);var e=a(31),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h4",{attrs:{id:"输入与输出"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#输入与输出"}},[t._v("#")]),t._v(" 输入与输出")]),t._v(" "),a("p",[t._v("使用reacline()读取每行输入,多行输入使用while(x = readline())，注意类型全是字符串"),a("br"),t._v('\n输入使用print或者console.log(a+" "+b)'),a("br"),t._v("\n可以把逻辑自行拆分为函数，再去调用函数传入读取的值，代码更加结构化")]),t._v(" "),a("h4",{attrs:{id:"常用api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用api"}},[t._v("#")]),t._v(" 常用Api")]),t._v(" "),a("ul",[a("li",[t._v("字符串拆分为数组 let arr = str.split(' ')")]),t._v(" "),a("li",[t._v("字符串截取，substring substr splice都不改变原字符串")]),t._v(" "),a("li",[t._v('字符串颠倒 str.split("").reverse().join("")  【只有数组可以reverse】')]),t._v(" "),a("li",[t._v("数组删除与插入 resArr.splice(find(two),0,one)")]),t._v(" "),a("li",[t._v("数组去重 Array.from(new Set(arr));")]),t._v(" "),a("li",[t._v("字符转换大小写 toLowerCase() toUpperCase()")]),t._v(" "),a("li",[t._v("下一位字母 String.fromCharCode(a.toLowerCase().charCodeAt(0)+1)")]),t._v(" "),a("li",[t._v("字符串转换数值 parseInt可以进制转换,转换为整数（去掉小数）、Number四舍五入也可以直接进制转换")]),t._v(" "),a("li",[t._v("toFixed(1)保留几位小数")]),t._v(" "),a("li",[t._v("向下取整Math.floor  向上取整Math.ceil")]),t._v(" "),a("li",[t._v("数组sort((a,b)=>a-b) 注意后面使用的是减法，不是大于小于；并且如果都是字符串，是按位比较的ASCII")]),t._v(" "),a("li",[t._v("数组中是否含有某个字符串arr.indexOf(str) 🔔arr写在前面！不是str写在前面！")])]),t._v(" "),a("h4",{attrs:{id:"for-of循环"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#for-of循环"}},[t._v("#")]),t._v(" for of循环")]),t._v(" "),a("p",[t._v("如果是map，for(const [key,value] of map)"),a("br"),t._v("\n如果是多维数组,for(const [value1,value2] of map)")]),t._v(" "),a("h4",{attrs:{id:"正则匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#正则匹配"}},[t._v("#")]),t._v(" 正则匹配")]),t._v(" "),a("p",[t._v('var reg = /^(A|D|W|S){1}[0-9]{1,2}$/; //匹配前面一位是字母，最后一两位是数字。整体不能写引号！\nreg.text("A11")')]),t._v(" "),a("div",{staticClass:"language-javascript extra-class"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("types")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("str")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//匹配数字、大小写字母、其他字符，要求种类大于等于三种")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[a-z]")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[A-Z]")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[0-9]")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("[^0-9a-zA-Z]")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("str"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//[]里面^是取反")]),t._v("\n        num"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" num "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("code.replace(/[(a-z)]/g,x=>{} 替换其中的字母")]),t._v(" "),a("h4",{attrs:{id:"其他"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),a("ol",[a("li",[t._v("判断质数因子的时候，可以每次质数+1，如果质数本身二次方比目标数值大，不需要继续while，剩下的就是本身无法再拆分")]),t._v(" "),a("li",[t._v("判断一个字符串是否有重复子串，可以每i个push到数组中，再用indexOf判断")]),t._v(" "),a("li",[t._v("求火车出站方案。可以在dfs中使用三个数组，表示当前原有的火车、出、入，全为push才能记录活动方案(只是区分了push的类型，pop出去的话就结果都一样了不能记录过程)")]),t._v(" "),a("li",[t._v("dfs除了最终结果，和开始的特殊状态，其余如果有不同方案可以走的话，递归回来的时候需要撤销状态再走其他分支")])])])}),[],!1,null,null,null);s.default=r.exports}}]);
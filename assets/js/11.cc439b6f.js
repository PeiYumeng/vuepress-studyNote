(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{428:function(t,a,s){t.exports=s.p+"assets/img/001.43b721ab.png"},429:function(t,a,s){t.exports=s.p+"assets/img/002.eb025ddc.png"},430:function(t,a,s){t.exports=s.p+"assets/img/003.6ba9272d.png"},473:function(t,a,s){"use strict";s.r(a);var n=s(54),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("ol",[n("li",[t._v("自定义v-modal\n"),n("img",{attrs:{src:s(428),alt:"a"}}),t._v(" "),n("img",{attrs:{src:s(429),alt:"a"}}),t._v("\n2.$nextTick\nVue是异步渲染框架，data改变之后DOM不会立刻渲染，$nextTick会在DOM渲染之后被触发以获取最新的DOM节点\n"),n("img",{attrs:{src:s(430),alt:"a"}}),t._v("\n3.slot插槽（父组件想要往子组件里插点东西）")])]),t._v(" "),n("ul",[n("li",[t._v("基本使用\nslot标签接收外面引用的标签的子节点，可以设置默认内容\n（可以替换原来组件的内容，比如增量或者复用的时候需要展示新的内容）\n外面父组件传参")])]),t._v(" "),n("p",[t._v("子组件标签写法：")]),t._v(" "),n("ul",[n("li",[t._v("作用域插槽\n（可能要求既要传进去新的属性内容，又要显示原来的内容，就需要子组件传出来值）\n父组件\nv-slot后面名称随便，文本插值中使用这个名称，并点子组件接收的名称，再点内容属性")])]),t._v(" "),n("p",[t._v("子组件")]),t._v(" "),n("ul",[n("li",[t._v("具名插槽")])]),t._v(" "),n("p",[t._v("name和v-slot对应起来，不写name使用默认\n4. 动态异步组件\n1）动态组件\n（需要根据数据动态渲染场景，即组件类型不确定：比如一个新闻页面，不确定用text img还是视频组件）\n:is = ‘component-name’\nis是绑定动态的一个值")]),t._v(" "),n("div",{staticClass:"language-html extra-class"},[n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("v-for")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v("“(val,key)")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("in")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v("newsData”")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token attr-name"}},[t._v(":key")]),n("span",{pre:!0,attrs:{class:"token attr-value"}},[n("span",{pre:!0,attrs:{class:"token punctuation attr-equals"}},[t._v("=")]),t._v("“key”")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v('\n    <component :is=“val.type">\n'),n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token tag"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),n("p",[t._v("2）异步组件\n如果比较大的组件直接加载会比较卡，影响性能—>按需加载，异步加载大组件")]),t._v(" "),n("p",[t._v("上面的import是同步引入，一共打一个包；使用函数引用（动态import函数）\n5. keep-alive（缓存组件：频繁切换，不需要重复渲染）—— 【Vue常见性能优化】")]),t._v(" "),n("p",[t._v("每个组件只走mounted不走销毁生命周期，再点击不重新mounted不重新渲染\n6. mixin——汇合，多个组件有相同的逻辑会抽离出来\n【Vue3提出的Composition API旨在解决这些问题】")]),t._v(" "),n("p",[t._v("多mixins可能会有变量冲突，变量来源不明不利于阅读，和组件可能出现多对多的关系复杂度高")])])}),[],!1,null,null,null);a.default=e.exports}}]);